{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/2.1.0/schema.json",
  "name": "168d5ff25c60c162b9ea",
  "position": {
    "x": 68.743718592964825,
    "y": 343.7185929648241,
    "z": 1000,
    "height": 376.28140703517585,
    "width": 1210.251256281407,
    "tabOrder": 1000
  },
  "visual": {
    "visualType": "pythonVisual",
    "query": {
      "queryState": {
        "Values": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Power Rankings"
                    }
                  },
                  "Property": "Rank"
                }
              },
              "queryRef": "Power Rankings.Rank",
              "nativeQueryRef": "Rank"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Power Rankings"
                    }
                  },
                  "Property": "Team"
                }
              },
              "queryRef": "Power Rankings.Team",
              "nativeQueryRef": "Team"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "Power Rankings"
                    }
                  },
                  "Property": "Week"
                }
              },
              "queryRef": "Power Rankings.Week",
              "nativeQueryRef": "Week"
            }
          ]
        }
      }
    },
    "objects": {
      "script": [
        {
          "properties": {
            "source": {
              "expr": {
                "Literal": {
                  "Value": "'# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: \n\n# dataset = pandas.DataFrame(Rank, Team, Week)\n# dataset = dataset.drop_duplicates()\n\n# Paste or type your script code here:\nimport matplotlib.pyplot as plt\nfrom matplotlib import collections as matcoll\n\ny = [1,2,3,4,5,6,7,8,9,10,11,12]\ny_ticks_labels = dataset[''Team''].unique()\nx=[]\nfor team in y_ticks_labels:\n    start = dataset[(dataset[''Team'']==team) & (dataset[''Week'']==1)].Rank.iloc[0]\n    end = dataset[(dataset[''Team'']==team) & (dataset[''Week'']==17)].Rank.iloc[0]\n    tuple = (start,end)\n    x.append(tuple)\ncounter=0\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(21, 6))\nfor i,j in x:\n    yChart = y[counter]\n    if i>j:\n        ax.plot(i,yChart, ''go'', markersize = 12,color=''limegreen'')\n        ax.plot(j,yChart, ''go'', markersize = 12,color=''limegreen'')\n        ax.annotate(\"\",(i,yChart),(j,yChart),size=20, arrowprops=dict(arrowstyle=\"<-\",connectionstyle=\"angle3\", lw=2,color=''forestgreen''))\n    elif j>i:\n        ax.plot(i,yChart,''ro'',markersize=12)\n        ax.plot(j,yChart,''ro'',markersize=12)\n        ax.annotate(\"\",(j,yChart),(i,yChart),size=20, arrowprops=dict(arrowstyle=\"->\",connectionstyle=\"angle3\", lw=2,color=''darkred''))\n    else:\n        ax.plot(i,yChart,''o'',markersize=12,color=''dimgrey'')\n    counter+=1\nax.set_yticks(y)\n# Set ticks labels for x-axis\nax.set_yticklabels(y_ticks_labels,fontsize=15)\n# plt.tight_layout()\nplt.show()\n'"
                }
              }
            },
            "provider": {
              "expr": {
                "Literal": {
                  "Value": "'Python'"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "title": [
        {
          "properties": {
            "text": {
              "expr": {
                "Literal": {
                  "Value": "'Power Rankings: Week 1 to Present Week Change'"
                }
              }
            },
            "alignment": {
              "expr": {
                "Literal": {
                  "Value": "'center'"
                }
              }
            },
            "bold": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "fontSize": {
              "expr": {
                "Literal": {
                  "Value": "15D"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  },
  "filterConfig": {
    "filters": [
      {
        "name": "e07ff7e330da5bef49a7",
        "field": {
          "Column": {
            "Expression": {
              "SourceRef": {
                "Entity": "Power Rankings"
              }
            },
            "Property": "Rank"
          }
        },
        "type": "Advanced"
      },
      {
        "name": "1af69dccb88bdbba974d",
        "field": {
          "Column": {
            "Expression": {
              "SourceRef": {
                "Entity": "Power Rankings"
              }
            },
            "Property": "Team"
          }
        },
        "type": "Categorical"
      },
      {
        "name": "e8db0853d8de46bd908a",
        "field": {
          "Column": {
            "Expression": {
              "SourceRef": {
                "Entity": "Power Rankings"
              }
            },
            "Property": "Week"
          }
        },
        "type": "Advanced"
      }
    ]
  }
}